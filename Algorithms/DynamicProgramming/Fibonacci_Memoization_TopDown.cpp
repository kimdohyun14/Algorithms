#include <bits/stdc++.h>
using namespace std;

// 다이나믹 프로그래밍 조건 2가지
// 1. 큰 문제를 작은 문제로 나눌 수 있다.
// 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.
// 이는 문제들이 서로 영향을 미치고 있다는 점이다.
// 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법

// 다이나믹 프로그래밍 기법을 적용하면
// 시간 복잡도는 O(N)이다.
// 한 번 구한 결과는 다시 구하지 않아도 되기 때문에.

// 일반적으로 재귀 함수를 이용해서 다이나믹 프로그래밍 소스 코드를 작성하는 방법을
// Top-down이라고 하며,
// 큰 문제를 해결하기 위해 작은 문제를 호출한다.

// 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 배열 초기화
long long d[100];

// 피보나치 함수를 재귀함수로 구현(Top-down)방식
long long Fibo(int x) {
	// 종료 조건(1 혹은 2일 때 1을 반환)
	if (x == 1 || x == 2) return 1;
	// 이미 계산한 적 있는 문제라면 그대로 반환
	if (d[x] != 0) return d[x];
	// 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
	d[x] = Fibo(x - 1) + Fibo(x - 2);
	return d[x];
}

int main() {
	cout << Fibo(50) << '\n';
	return 0;
}